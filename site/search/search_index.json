{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Bioinformatics Collection This website is a collection of lectures and tutorials for me. Created/Collected by Christian Brandt. Using this tutorial for side creation: https://mkdocs.readthedocs.io/en/stable/ Table of Content see navigation above License Unless stated otherwise, all is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#bioinformatics-collection","text":"This website is a collection of lectures and tutorials for me. Created/Collected by Christian Brandt. Using this tutorial for side creation: https://mkdocs.readthedocs.io/en/stable/","title":"Bioinformatics Collection"},{"location":"#table-of-content","text":"see navigation above","title":"Table of Content"},{"location":"#license","text":"Unless stated otherwise, all is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.","title":"License"},{"location":"databases/","text":"Biological Databases Major Databases Nucleic ( ENA , Genbank , DDBJ ) ENA European Nucleotide Archive (go here to add DNA) they all share the same Accessionnumber Protein (SwissProt, RefSeq, TREMBL) all proteins go through Interpro Genomic (ENSEMBL) Older DB-Versions are always available only curated and publicized Genomes highly accurate Looking for a Species? go to ENSEMBL includes Cytogenic Banding (shows how stained Chromosomes have to look) EST shows were the gene is expressed (e. g. liver) Protein structure (PDB) DB for protein analysis Sequences from: Uniprot (Swissprot; trEMBL); Structure PDB (rcsb.org) Usually similar seq/structure = similar function Sequence motifs explained: {L} = everything except L; [LM] = M or L; x = everything [color=lightgreen] Use sequence profiles (e.g. motifs) to get more distant but related proteins, instead of just using BLAST Physiochemical properties (weight, electric load, hydrophili profile etc.) are taken into account for alignments Secondary structure prediction use a combination of methods, not only one try get a consensus \"prediction pattern\" of all prediction methods Best Site for this is \"NPSA-pbil\", its called consensus sec. structure prediction search here . other: http://expasy.org/ http://www.unoriprot.g/ http://www.ebiokit.eu/ http://blast.ncbi.nlm.nih.gov/Blast.cgi https://www.ebi.ac.uk/interpro http://www.rcsb.org/pdb Protein Visualization with: UGENE Suite , DeepView, VMD (good one), Pymol, Rasmol/Jmol Tridimensional structure prediction (homology modeling) You need to find a protein template (use BLAST or PSI-BLAST) with a similarity of at least 30 % and a structure Do a pairwaise alignment then Build a predicted structure with: Rigid body assembly, segment matching (SWISS - MODEL, SegMOD) Satisfaction of spatial restraints (distance and angles) => MODELLER, Geno3D Artificial evolution (template - based methods with ab initio - like energy minimization principles) => NEST Check quality afterwards (PROCHECK, PDBSum etc. to see if the model seems possible)","title":"General"},{"location":"databases/#biological-databases","text":"","title":"Biological Databases"},{"location":"databases/#major-databases","text":"Nucleic ( ENA , Genbank , DDBJ ) ENA European Nucleotide Archive (go here to add DNA) they all share the same Accessionnumber Protein (SwissProt, RefSeq, TREMBL) all proteins go through Interpro Genomic (ENSEMBL) Older DB-Versions are always available only curated and publicized Genomes highly accurate Looking for a Species? go to ENSEMBL includes Cytogenic Banding (shows how stained Chromosomes have to look) EST shows were the gene is expressed (e. g. liver) Protein structure (PDB)","title":"Major Databases"},{"location":"databases/#db-for-protein-analysis","text":"Sequences from: Uniprot (Swissprot; trEMBL); Structure PDB (rcsb.org) Usually similar seq/structure = similar function Sequence motifs explained: {L} = everything except L; [LM] = M or L; x = everything [color=lightgreen] Use sequence profiles (e.g. motifs) to get more distant but related proteins, instead of just using BLAST Physiochemical properties (weight, electric load, hydrophili profile etc.) are taken into account for alignments","title":"DB for protein analysis"},{"location":"databases/#secondary-structure-prediction","text":"use a combination of methods, not only one try get a consensus \"prediction pattern\" of all prediction methods Best Site for this is \"NPSA-pbil\", its called consensus sec. structure prediction search here . other: http://expasy.org/ http://www.unoriprot.g/ http://www.ebiokit.eu/ http://blast.ncbi.nlm.nih.gov/Blast.cgi https://www.ebi.ac.uk/interpro http://www.rcsb.org/pdb Protein Visualization with: UGENE Suite , DeepView, VMD (good one), Pymol, Rasmol/Jmol","title":"Secondary structure prediction"},{"location":"databases/#tridimensional-structure-prediction-homology-modeling","text":"You need to find a protein template (use BLAST or PSI-BLAST) with a similarity of at least 30 % and a structure Do a pairwaise alignment then Build a predicted structure with: Rigid body assembly, segment matching (SWISS - MODEL, SegMOD) Satisfaction of spatial restraints (distance and angles) => MODELLER, Geno3D Artificial evolution (template - based methods with ab initio - like energy minimization principles) => NEST Check quality afterwards (PROCHECK, PDBSum etc. to see if the model seems possible)","title":"Tridimensional structure prediction (homology modeling)"},{"location":"emboss/","text":"Emboss EMBOSS Open Software Suite wossname is your first to go command to search for all the tools wossname \"sequence alignment\" total of around 100 tools, including data retrivel from web ( fastq-dump ) install EMBOSS: sudo apt-get install emboss You may need libx11-dev module (visualisation of graphs) sudo apt-get install libx11-dev Web based Version Tools included (selection): prophet gapped alignment water smith waterman local alignment infoseq get information of a sequence showfeat get features of a seq, coils, bindingsites etc. eprimer3 or primer3, primers and hybridization oligos, best one water is highly accurate alignment but very slow seqret fetches sequences from databases getorf finds open reading frames transseq translate nucleotides seq to proteins dottup dot plot of pairwise alignment good image for publication needle global alignment prettyplot multiple seq. alignment and graphics equicktandem microsatellites, palindroms, repeats wEMBOSS you need a EMBOSS server (own or a other available somewhere (like a workstation)) you access this with wEMBOSS all results can be created in html wEMBOSS needs to know if DNA or Protein sequence, then it shows associated programs GUI is user friendly but less flexible program shows you the associated \"command line","title":"EMBOSS"},{"location":"emboss/#emboss","text":"","title":"Emboss"},{"location":"emboss/#emboss-open-software-suite","text":"wossname is your first to go command to search for all the tools wossname \"sequence alignment\" total of around 100 tools, including data retrivel from web ( fastq-dump ) install EMBOSS: sudo apt-get install emboss You may need libx11-dev module (visualisation of graphs) sudo apt-get install libx11-dev Web based Version Tools included (selection): prophet gapped alignment water smith waterman local alignment infoseq get information of a sequence showfeat get features of a seq, coils, bindingsites etc. eprimer3 or primer3, primers and hybridization oligos, best one water is highly accurate alignment but very slow seqret fetches sequences from databases getorf finds open reading frames transseq translate nucleotides seq to proteins dottup dot plot of pairwise alignment good image for publication needle global alignment prettyplot multiple seq. alignment and graphics equicktandem microsatellites, palindroms, repeats","title":"EMBOSS Open Software Suite"},{"location":"emboss/#wemboss","text":"you need a EMBOSS server (own or a other available somewhere (like a workstation)) you access this with wEMBOSS all results can be created in html wEMBOSS needs to know if DNA or Protein sequence, then it shows associated programs GUI is user friendly but less flexible program shows you the associated \"command line","title":"wEMBOSS"},{"location":"fasta/","text":"Unix Fastq/Fasta awk/sed cheats here you can find a few awk sed shortcuts for fasta manipulation # converting fastq to fasta sed -n '1~4s/^@/>/p;2~4p' INFILE.fastq > OUTFILE.fasta # maka fastafiles one liner (good for shell stuff) sed ':a;N;/^>/M!s/\\n//;ta;P;D' Input.fasta > oneliner.fasta # filter multifasta by a certain length - in this case 1000 bp awk '/^>/ { getline seq } length(seq) >1000 { print $0 \"\\n\" seq }' oneliner.fasta > online_grt1000.fasta as loops #lazy way for x in *.fastq; do sed -n '1~4s/^@/>/p;2~4p' $x > ${x%.fastq}.fasta ; done for x in *.fasta; do sed ':a;N;/^>/M!s/\\n//;ta;P;D' $x > ${x%.fasta}_oneliner.fasta ; done for x in *_oneliner.fasta; do awk '/^>/ { getline seq } length(seq) >1000 { print $0 \"\\n\" seq }' $x > ${x%._onliner.fasta}_clean.fasta ; done # check all reads for x in *.fasta ; do echo grep -c \">\" $x","title":"Fasta_Manipulation"},{"location":"fasta/#unix","text":"","title":"Unix"},{"location":"fasta/#fastqfasta-awksed-cheats","text":"here you can find a few awk sed shortcuts for fasta manipulation # converting fastq to fasta sed -n '1~4s/^@/>/p;2~4p' INFILE.fastq > OUTFILE.fasta # maka fastafiles one liner (good for shell stuff) sed ':a;N;/^>/M!s/\\n//;ta;P;D' Input.fasta > oneliner.fasta # filter multifasta by a certain length - in this case 1000 bp awk '/^>/ { getline seq } length(seq) >1000 { print $0 \"\\n\" seq }' oneliner.fasta > online_grt1000.fasta as loops #lazy way for x in *.fastq; do sed -n '1~4s/^@/>/p;2~4p' $x > ${x%.fastq}.fasta ; done for x in *.fasta; do sed ':a;N;/^>/M!s/\\n//;ta;P;D' $x > ${x%.fasta}_oneliner.fasta ; done for x in *_oneliner.fasta; do awk '/^>/ { getline seq } length(seq) >1000 { print $0 \"\\n\" seq }' $x > ${x%._onliner.fasta}_clean.fasta ; done # check all reads for x in *.fasta ; do echo grep -c \">\" $x","title":"Fastq/Fasta awk/sed cheats"},{"location":"python/","text":"Python Basics in shell do python3 to open the command line python3 skript.py to execute a .py skript Special rules you can split a single line like this into multiple lines using \\ total = item_one + \\ item_two + \\ item_three Commands #!/usr/bin/python3 print(\"test\") #basically like echo, includes \\n input(\"\\n\\nPress the enter key to exit.\") #creates a user prompt, has two empty lines before ; #like shell to get more commands in one line Variables in python3 Usually Class names start with an uppercase letter All other identifiers start with a lowercase letter Starting an identifier with a single leading underscore indicates that the identifier is private don't use words like for etc for it A few examples: Numeric Variables #!/usr/bin/python3 counter = 100 # An integer assignment miles = 1000.0 # A floating point name = \"John\" # A string cplx = 70.2-E12 # complex number # also possible to add one input to multiple variables a = b = c = 1 #or like an oneliner array (so a get 1 b 2 etc.) a, b, c = 1, 2, \"john\" # delete them with del counter, miles String Variables #!/usr/bin/python3 str = 'Hello World!' print (str) # Prints complete string, starts at 0 print (str[0]) # Prints first character of the string print (str[2:5]) # Prints characters starting from 3rd to 5th print (str[2:]) # Prints string starting from 3rd character print (str * 2) # Prints string two times print (str + \"TEST\") # works only on strings List Variables works a bit like in R can store different variable types, can be changed a list works only with [] a \"read only\" list is with () #!/usr/bin/python3 list = [ 'abcd', 786 , 2.23, 'john', 70.2 ] tinylist = [123, 'john'] print (list) # Prints complete list print (list[0]) # Prints first element of the list print (list[1:3]) # Prints elements starting from 2nd till 3rd print (list[2:]) # Prints elements starting from 3rd element print (tinylist * 2) # Prints list two times print (list + tinylist) # Prints concatenated lists tuple = ( 'abcd', 786 , 2.23, 'john', 70.2 ) # print works exactly the same here there is also a dictionary type of list with {} its basically unordered, so you can shove data into it check here Loops are without braces, spacing and lines depends if it works examples: for i in [1,2,3]: print(i) #only shows the variable print('%sbp' % i) #this is how to put variables and text together print(\"____\") print(\"loop is ended, wow\") #first line with : is called header, all of it is called suite if expression : suite elif expression : suite else : suite","title":"Basics"},{"location":"python/#python","text":"","title":"Python"},{"location":"python/#basics","text":"in shell do python3 to open the command line python3 skript.py to execute a .py skript","title":"Basics"},{"location":"python/#special-rules","text":"you can split a single line like this into multiple lines using \\ total = item_one + \\ item_two + \\ item_three","title":"Special rules"},{"location":"python/#commands","text":"#!/usr/bin/python3 print(\"test\") #basically like echo, includes \\n input(\"\\n\\nPress the enter key to exit.\") #creates a user prompt, has two empty lines before ; #like shell to get more commands in one line","title":"Commands"},{"location":"python/#variables-in-python3","text":"Usually Class names start with an uppercase letter All other identifiers start with a lowercase letter Starting an identifier with a single leading underscore indicates that the identifier is private don't use words like for etc for it A few examples:","title":"Variables in python3"},{"location":"python/#numeric-variables","text":"#!/usr/bin/python3 counter = 100 # An integer assignment miles = 1000.0 # A floating point name = \"John\" # A string cplx = 70.2-E12 # complex number # also possible to add one input to multiple variables a = b = c = 1 #or like an oneliner array (so a get 1 b 2 etc.) a, b, c = 1, 2, \"john\" # delete them with del counter, miles","title":"Numeric Variables"},{"location":"python/#string-variables","text":"#!/usr/bin/python3 str = 'Hello World!' print (str) # Prints complete string, starts at 0 print (str[0]) # Prints first character of the string print (str[2:5]) # Prints characters starting from 3rd to 5th print (str[2:]) # Prints string starting from 3rd character print (str * 2) # Prints string two times print (str + \"TEST\") # works only on strings","title":"String Variables"},{"location":"python/#list-variables","text":"works a bit like in R can store different variable types, can be changed a list works only with [] a \"read only\" list is with () #!/usr/bin/python3 list = [ 'abcd', 786 , 2.23, 'john', 70.2 ] tinylist = [123, 'john'] print (list) # Prints complete list print (list[0]) # Prints first element of the list print (list[1:3]) # Prints elements starting from 2nd till 3rd print (list[2:]) # Prints elements starting from 3rd element print (tinylist * 2) # Prints list two times print (list + tinylist) # Prints concatenated lists tuple = ( 'abcd', 786 , 2.23, 'john', 70.2 ) # print works exactly the same here there is also a dictionary type of list with {} its basically unordered, so you can shove data into it check here","title":"List Variables"},{"location":"python/#loops","text":"are without braces, spacing and lines depends if it works examples: for i in [1,2,3]: print(i) #only shows the variable print('%sbp' % i) #this is how to put variables and text together print(\"____\") print(\"loop is ended, wow\") #first line with : is called header, all of it is called suite if expression : suite elif expression : suite else : suite","title":"Loops"},{"location":"shell/","text":"Unix Unix Commands Short cuts ctrl + C terminates a process ctrl + D logout from a ssh remote ctrl + Z pauses a process ctrl + alt + arrow for multi desktop Standard commands cut -d -f3 # -f 3,4 also possible, delimiter tab is default for -d without input sort head -10 less uniq -c # a uniq that also counts using -c wc -l # wordcount or -l lines tail -n +2 # starts at line 2, reverse \"head\" seq 1 10 # sequence, prints 1 2 3 4 5 (...) 10 grep -c \">\" # -c counts the \">\" in all the files you give grep grep -w \"ls\" # exact match ls -lh # human readable ls command ln -s ~/data/* . # creates a link for all data in /data to current folder . zless # makes a \"less\" on an gz file tar -xvf mkdir -p # creates only folder if it doesnt exist chmod u=rw # [u g o a] [-+=] [rwx] user group other all(=user&group&other) htop # CPU and RAM information echo $PATH # shows all bin/ directories df -h # free disk space","title":"Basics"},{"location":"shell/#unix","text":"","title":"Unix"},{"location":"shell/#unix-commands","text":"","title":"Unix Commands"},{"location":"shell/#short-cuts","text":"ctrl + C terminates a process ctrl + D logout from a ssh remote ctrl + Z pauses a process ctrl + alt + arrow for multi desktop","title":"Short cuts"},{"location":"shell/#standard-commands","text":"cut -d -f3 # -f 3,4 also possible, delimiter tab is default for -d without input sort head -10 less uniq -c # a uniq that also counts using -c wc -l # wordcount or -l lines tail -n +2 # starts at line 2, reverse \"head\" seq 1 10 # sequence, prints 1 2 3 4 5 (...) 10 grep -c \">\" # -c counts the \">\" in all the files you give grep grep -w \"ls\" # exact match ls -lh # human readable ls command ln -s ~/data/* . # creates a link for all data in /data to current folder . zless # makes a \"less\" on an gz file tar -xvf mkdir -p # creates only folder if it doesnt exist chmod u=rw # [u g o a] [-+=] [rwx] user group other all(=user&group&other) htop # CPU and RAM information echo $PATH # shows all bin/ directories df -h # free disk space","title":"Standard commands"}]}